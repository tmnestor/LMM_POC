{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cell-0",
   "metadata": {},
   "source": [
    "# Llama Document-Type-Aware Adaptive Extraction\n",
    "\n",
    "Processes all images using multi-stage adaptive extraction:\n",
    "1. **Stage 0**: Classify document type (INVOICE/RECEIPT/BANK_STATEMENT)\n",
    "2. **Stage 1**: Classify structure (if BANK_STATEMENT: FLAT/GROUPED)\n",
    "3. **Stage 2**: Apply document-type and structure-specific extraction prompt\n",
    "\n",
    "Outputs compatible with model_comparison.ipynb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cell-1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ Imports loaded</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ Imports loaded\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import gc\n",
    "import json\n",
    "import random\n",
    "from datetime import datetime\n",
    "from pathlib import Path\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torch\n",
    "import yaml\n",
    "from PIL import Image\n",
    "from rich import print as rprint\n",
    "from rich.console import Console\n",
    "from tqdm import tqdm\n",
    "from transformers import AutoProcessor, MllamaForConditionalGeneration\n",
    "\n",
    "# Initialize console for rich output\n",
    "console = Console()\n",
    "\n",
    "def set_seed(seed=42):\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    if torch.cuda.is_available():\n",
    "        torch.cuda.manual_seed_all(seed)\n",
    "\n",
    "set_seed(42)\n",
    "rprint(\"[green]✅ Imports loaded[/green]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cell-2",
   "metadata": {},
   "source": [
    "## Configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cell-3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ Configuration loaded</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ Configuration loaded\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Output directory: /home/jovyan/nfs_share/tod/LMM_POC/output</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Output directory: \u001b[0m\u001b[36m/home/jovyan/nfs_share/tod/LMM_POC/\u001b[0m\u001b[36moutput\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Timestamp: 20251021_082825</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Timestamp: 20251021_082825\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Configuration\n",
    "CONFIG = {\n",
    "    'MODEL_PATH': \"/home/jovyan/nfs_share/models/Llama-3.2-11B-Vision-Instruct\",\n",
    "    'DATA_DIR': \"/home/jovyan/nfs_share/tod/LMM_POC/evaluation_data\",\n",
    "    'PROMPT_FILE_DOCTYPE': \"/home/jovyan/nfs_share/tod/LMM_POC/prompts/document_type_detection.yaml\",\n",
    "    'PROMPT_FILE_INVOICE': \"/home/jovyan/nfs_share/tod/LMM_POC/prompts/generated/llama_invoice_prompt.yaml\",\n",
    "    'PROMPT_FILE_RECEIPT': \"/home/jovyan/nfs_share/tod/LMM_POC/prompts/generated/llama_receipt_prompt.yaml\",\n",
    "    'PROMPT_FILE_BANK': \"/home/jovyan/nfs_share/tod/LMM_POC/prompts/generated/llama_bank_statement_prompt.yaml\",\n",
    "    'OUTPUT_DIR': \"/home/jovyan/nfs_share/tod/LMM_POC/output\",\n",
    "    'GROUND_TRUTH': \"/home/jovyan/nfs_share/tod/LMM_POC/evaluation_data/ground_truth.csv\",\n",
    "    'MAX_NEW_TOKENS_DOCTYPE': 50,\n",
    "    'MAX_NEW_TOKENS_STRUCTURE': 50,\n",
    "    'MAX_NEW_TOKENS_EXTRACT': 2000,\n",
    "}\n",
    "\n",
    "# Create output directory\n",
    "output_dir = Path(CONFIG['OUTPUT_DIR'])\n",
    "output_dir.mkdir(exist_ok=True)\n",
    "\n",
    "# Timestamp for output files\n",
    "TIMESTAMP = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
    "\n",
    "rprint(\"[green]✅ Configuration loaded[/green]\")\n",
    "rprint(f\"[cyan]  Output directory: {output_dir}[/cyan]\")\n",
    "rprint(f\"[cyan]  Timestamp: {TIMESTAMP}[/cyan]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cell-4",
   "metadata": {},
   "source": [
    "## Load Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cell-5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">🔧 Loading Llama model...</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;32m🔧 Loading Llama model\u001b[0m\u001b[1;32m...\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ba3622f83661468ca516fccfdab8d820",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ Model loaded</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ Model loaded\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load model\n",
    "rprint(\"[bold green]🔧 Loading Llama model...[/bold green]\")\n",
    "\n",
    "model = MllamaForConditionalGeneration.from_pretrained(\n",
    "    CONFIG['MODEL_PATH'],\n",
    "    torch_dtype=torch.bfloat16,\n",
    "    device_map=\"auto\"\n",
    ")\n",
    "processor = AutoProcessor.from_pretrained(CONFIG['MODEL_PATH'])\n",
    "\n",
    "rprint(\"[green]✅ Model loaded[/green]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cell-6",
   "metadata": {},
   "source": [
    "## Load All Prompts\n",
    "\n",
    "Loading prompts for:\n",
    "- Document type detection\n",
    "- Invoice extraction\n",
    "- Receipt extraction  \n",
    "- Bank statement extraction (flat and grouped variants)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cell-7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ All prompts loaded</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ All prompts loaded\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Document type detection: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">197</span><span style=\"color: #008080; text-decoration-color: #008080\"> chars</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Document type detection: \u001b[0m\u001b[1;36m197\u001b[0m\u001b[36m chars\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Invoice extraction: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2138</span><span style=\"color: #008080; text-decoration-color: #008080\"> chars</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Invoice extraction: \u001b[0m\u001b[1;36m2138\u001b[0m\u001b[36m chars\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Receipt extraction: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2138</span><span style=\"color: #008080; text-decoration-color: #008080\"> chars</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Receipt extraction: \u001b[0m\u001b[1;36m2138\u001b[0m\u001b[36m chars\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Bank flat extraction: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3056</span><span style=\"color: #008080; text-decoration-color: #008080\"> chars</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Bank flat extraction: \u001b[0m\u001b[1;36m3056\u001b[0m\u001b[36m chars\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Bank grouped extraction: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3282</span><span style=\"color: #008080; text-decoration-color: #008080\"> chars</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Bank grouped extraction: \u001b[0m\u001b[1;36m3282\u001b[0m\u001b[36m chars\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load all prompts\n",
    "\n",
    "# Document type detection prompt\n",
    "with open(CONFIG['PROMPT_FILE_DOCTYPE'], 'r') as f:\n",
    "    doctype_data = yaml.safe_load(f)\n",
    "    DOCTYPE_PROMPT = doctype_data['prompts']['detection']['prompt']\n",
    "\n",
    "# Invoice extraction prompt\n",
    "with open(CONFIG['PROMPT_FILE_INVOICE'], 'r') as f:\n",
    "    invoice_data = yaml.safe_load(f)\n",
    "    INVOICE_PROMPT = invoice_data['prompts']['invoice']['prompt']\n",
    "\n",
    "# Receipt extraction prompt\n",
    "with open(CONFIG['PROMPT_FILE_RECEIPT'], 'r') as f:\n",
    "    receipt_data = yaml.safe_load(f)\n",
    "    RECEIPT_PROMPT = receipt_data['prompts']['receipt']['prompt']\n",
    "\n",
    "# Bank statement extraction prompts\n",
    "with open(CONFIG['PROMPT_FILE_BANK'], 'r') as f:\n",
    "    bank_data = yaml.safe_load(f)\n",
    "    BANK_PROMPTS = {\n",
    "        'flat': bank_data['prompts']['bank_statement_flat']['prompt'],\n",
    "        'date_grouped': bank_data['prompts']['bank_statement_date_grouped']['prompt']\n",
    "    }\n",
    "\n",
    "# Bank statement structure classification prompt\n",
    "STRUCTURE_CLASSIFICATION_PROMPT = \"\"\"Look at how dates are displayed in this bank statement's transaction list.\n",
    "\n",
    "Answer with ONLY one word:\n",
    "- FLAT (if dates appear as the FIRST COLUMN in a table row, like: \"05/05/2025 | Purchase | $22.50\")\n",
    "- GROUPED (if dates appear as SECTION HEADERS above transactions, like: \"Thu 05 Sep 2025\" followed by indented transaction details below)\n",
    "\n",
    "The key difference: FLAT has dates IN the table columns, GROUPED has dates AS headers ABOVE the rows.\n",
    "\n",
    "Answer (one word only):\"\"\"\n",
    "\n",
    "rprint(\"[green]✅ All prompts loaded[/green]\")\n",
    "rprint(f\"[cyan]  Document type detection: {len(DOCTYPE_PROMPT)} chars[/cyan]\")\n",
    "rprint(f\"[cyan]  Invoice extraction: {len(INVOICE_PROMPT)} chars[/cyan]\")\n",
    "rprint(f\"[cyan]  Receipt extraction: {len(RECEIPT_PROMPT)} chars[/cyan]\")\n",
    "rprint(f\"[cyan]  Bank flat extraction: {len(BANK_PROMPTS['flat'])} chars[/cyan]\")\n",
    "rprint(f\"[cyan]  Bank grouped extraction: {len(BANK_PROMPTS['date_grouped'])} chars[/cyan]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cell-8",
   "metadata": {},
   "source": [
    "## Multi-Turn Chat Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cell-9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ Chat function defined</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ Chat function defined\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def chat_with_mllm(model, processor, prompt, images, messages=None, max_new_tokens=2000, do_sample=False):\n",
    "    \"\"\"Multi-turn chat using working pattern from Medium article.\"\"\"\n",
    "    if messages is None:\n",
    "        messages = []\n",
    "    \n",
    "    if len(messages) == 0:\n",
    "        messages = [{\"role\": \"user\", \"content\": [{\"type\": \"image\"}, {\"type\": \"text\", \"text\": prompt}]}]\n",
    "    else:\n",
    "        messages.append({\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": prompt}]})\n",
    "    \n",
    "    text = processor.apply_chat_template(messages, add_generation_prompt=True)\n",
    "    inputs = processor(images=images, text=text, return_tensors=\"pt\").to(model.device)\n",
    "    \n",
    "    # Deterministic generation: explicitly disable sampling parameters\n",
    "    generation_args = {\n",
    "        \"max_new_tokens\": max_new_tokens,\n",
    "        \"do_sample\": do_sample,\n",
    "        \"temperature\": None if not do_sample else 0.6,\n",
    "        \"top_p\": None if not do_sample else 0.9\n",
    "    }\n",
    "    generate_ids = model.generate(**inputs, **generation_args)\n",
    "    \n",
    "    # Trim input tokens from output\n",
    "    generate_ids = generate_ids[:, inputs['input_ids'].shape[1]:-1]\n",
    "    generated_texts = processor.decode(generate_ids[0], clean_up_tokenization_spaces=False)\n",
    "    \n",
    "    messages.append({\"role\": \"assistant\", \"content\": [{\"type\": \"text\", \"text\": generated_texts}]})\n",
    "    \n",
    "    return generated_texts, messages\n",
    "\n",
    "rprint(\"[green]✅ Chat function defined[/green]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cell-10",
   "metadata": {},
   "source": [
    "## Parser Functions\n",
    "\n",
    "Functions to parse VLM responses:\n",
    "- Document type classification\n",
    "- Bank statement structure classification\n",
    "- Field extraction parsing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cell-11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ Parser functions defined</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ Parser functions defined\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def parse_document_type(response):\n",
    "    \"\"\"Parse document type from VLM response.\"\"\"\n",
    "    response = response.strip().upper()\n",
    "    if \"INVOICE\" in response:\n",
    "        return \"INVOICE\"\n",
    "    elif \"RECEIPT\" in response:\n",
    "        return \"RECEIPT\"\n",
    "    elif \"BANK\" in response or \"STATEMENT\" in response:\n",
    "        return \"BANK_STATEMENT\"\n",
    "    else:\n",
    "        return \"INVOICE\"  # Default fallback\n",
    "\n",
    "def parse_structure_type(response):\n",
    "    \"\"\"Parse bank statement structure type from VLM response.\"\"\"\n",
    "    response = response.strip().upper()\n",
    "    if \"FLAT\" in response:\n",
    "        return \"flat\"\n",
    "    elif \"GROUPED\" in response or \"DATE\" in response:\n",
    "        return \"date_grouped\"\n",
    "    else:\n",
    "        return \"flat\"  # Default fallback\n",
    "\n",
    "def parse_extraction(extraction_text):\n",
    "    \"\"\"Parse extraction text into field dictionary.\"\"\"\n",
    "    extracted_fields = {}\n",
    "    \n",
    "    for line in extraction_text.split('\\n'):\n",
    "        line = line.strip()\n",
    "        if ':' in line and not line.startswith('#'):\n",
    "            parts = line.split(':', 1)\n",
    "            if len(parts) == 2:\n",
    "                field_name = parts[0].strip()\n",
    "                field_value = parts[1].strip()\n",
    "                extracted_fields[field_name] = field_value if field_value else 'NOT_FOUND'\n",
    "    \n",
    "    return extracted_fields\n",
    "\n",
    "rprint(\"[green]✅ Parser functions defined[/green]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cell-12",
   "metadata": {},
   "source": [
    "## Discover Images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cell-13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ Found </span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">9</span><span style=\"color: #008000; text-decoration-color: #008000\"> images to process</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ Found \u001b[0m\u001b[1;32m9\u001b[0m\u001b[32m images to process\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #000080; text-decoration-color: #000080; font-weight: bold\">Images to process:</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;34mImages to process:\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  - image_001.png</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  - image_001.png\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  - image_002.png</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  - image_002.png\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  - image_003.png</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  - image_003.png\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  - image_004.png</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  - image_004.png\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  - image_005.png</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  - image_005.png\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  - image_006.png</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  - image_006.png\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  - image_007.png</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  - image_007.png\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  - image_008.png</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  - image_008.png\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  - image_009.png</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  - image_009.png\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Discover all images (no filtering by document type)\n",
    "data_dir = Path(CONFIG['DATA_DIR'])\n",
    "image_files = sorted(data_dir.glob(\"*.png\"))\n",
    "\n",
    "rprint(f\"[green]✅ Found {len(image_files)} images to process[/green]\")\n",
    "\n",
    "rprint(\"\\n[bold blue]Images to process:[/bold blue]\")\n",
    "for img in image_files:\n",
    "    rprint(f\"[cyan]  - {img.name}[/cyan]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cell-14",
   "metadata": {},
   "source": [
    "## Multi-Stage Batch Processing\n",
    "\n",
    "**Stage 0**: Document Type Classification (INVOICE/RECEIPT/BANK_STATEMENT)\n",
    "**Stage 1**: Structure Classification (for BANK_STATEMENT only: FLAT/GROUPED)\n",
    "**Stage 2**: Document-Type-Aware Extraction (using appropriate prompt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cell-15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">🚀 Starting multi-stage adaptive extraction...</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;32m🚀 Starting multi-stage adaptive extraction\u001b[0m\u001b[1;32m...\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing images:   0%|          | 0/9 [00:00<?, ?it/s]"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ image_001.png: RECEIPT </span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">(</span><span style=\"color: #008000; text-decoration-color: #008000\">direct</span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">)</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ image_001.png: RECEIPT \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mdirect\u001b[0m\u001b[1;32m)\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing images:  11%|█         | 1/9 [00:07<01:02,  7.76s/it]"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ image_002.png: RECEIPT </span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">(</span><span style=\"color: #008000; text-decoration-color: #008000\">direct</span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">)</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ image_002.png: RECEIPT \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mdirect\u001b[0m\u001b[1;32m)\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing images:  22%|██▏       | 2/9 [00:15<00:54,  7.77s/it]"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ image_003.png: BANK_STATEMENT </span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">(</span><span style=\"color: #008000; text-decoration-color: #008000\">flat</span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">)</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ image_003.png: BANK_STATEMENT \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mflat\u001b[0m\u001b[1;32m)\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing images:  33%|███▎      | 3/9 [00:23<00:47,  7.87s/it]"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ image_004.png: RECEIPT </span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">(</span><span style=\"color: #008000; text-decoration-color: #008000\">direct</span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">)</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ image_004.png: RECEIPT \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mdirect\u001b[0m\u001b[1;32m)\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing images:  44%|████▍     | 4/9 [00:30<00:37,  7.50s/it]"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ image_005.png: INVOICE </span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">(</span><span style=\"color: #008000; text-decoration-color: #008000\">direct</span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">)</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ image_005.png: INVOICE \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mdirect\u001b[0m\u001b[1;32m)\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing images:  56%|█████▌    | 5/9 [00:38<00:31,  7.79s/it]"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ image_006.png: INVOICE </span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">(</span><span style=\"color: #008000; text-decoration-color: #008000\">direct</span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">)</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ image_006.png: INVOICE \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mdirect\u001b[0m\u001b[1;32m)\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing images:  67%|██████▋   | 6/9 [00:48<00:25,  8.58s/it]"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ image_007.png: INVOICE </span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">(</span><span style=\"color: #008000; text-decoration-color: #008000\">direct</span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">)</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ image_007.png: INVOICE \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mdirect\u001b[0m\u001b[1;32m)\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing images:  78%|███████▊  | 7/9 [00:56<00:16,  8.34s/it]"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ image_008.png: BANK_STATEMENT </span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">(</span><span style=\"color: #008000; text-decoration-color: #008000\">date_grouped</span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">)</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ image_008.png: BANK_STATEMENT \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mdate_grouped\u001b[0m\u001b[1;32m)\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing images:  89%|████████▉ | 8/9 [01:27<00:15, 15.53s/it]"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ image_009.png: BANK_STATEMENT </span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">(</span><span style=\"color: #008000; text-decoration-color: #008000\">date_grouped</span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">)</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ image_009.png: BANK_STATEMENT \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mdate_grouped\u001b[0m\u001b[1;32m)\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing images: 100%|██████████| 9/9 [01:41<00:00, 11.23s/it]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">──────────────────────────────────────────── </span><span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">Batch Processing Complete</span><span style=\"color: #00ff00; text-decoration-color: #00ff00\"> ────────────────────────────────────────────</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[92m──────────────────────────────────────────── \u001b[0m\u001b[1;32mBatch Processing Complete\u001b[0m\u001b[92m ────────────────────────────────────────────\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #000080; text-decoration-color: #000080; font-weight: bold\">📊 Document Type Classification Summary:</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;34m📊 Document Type Classification Summary:\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Invoices: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Invoices: \u001b[0m\u001b[1;36m3\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Receipts: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Receipts: \u001b[0m\u001b[1;36m3\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Bank Statements: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Bank Statements: \u001b[0m\u001b[1;36m3\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #000080; text-decoration-color: #000080; font-weight: bold\">📊 Bank Statement Structure Summary:</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;34m📊 Bank Statement Structure Summary:\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Flat table: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Flat table: \u001b[0m\u001b[1;36m1\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Date-grouped: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Date-grouped: \u001b[0m\u001b[1;36m2\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Multi-stage adaptive extraction\n",
    "results = []\n",
    "doctype_counts = {'INVOICE': 0, 'RECEIPT': 0, 'BANK_STATEMENT': 0}\n",
    "structure_counts = {'flat': 0, 'date_grouped': 0}\n",
    "\n",
    "rprint(\"\\n[bold green]🚀 Starting multi-stage adaptive extraction...[/bold green]\\n\")\n",
    "\n",
    "for idx, image_path in enumerate(tqdm(image_files, desc=\"Processing images\"), 1):\n",
    "    image_name = image_path.name\n",
    "    \n",
    "    try:\n",
    "        # Load image\n",
    "        image = Image.open(image_path)\n",
    "        images = [image]\n",
    "        messages = []\n",
    "        \n",
    "        # STAGE 0: Document Type Classification\n",
    "        doctype_answer, messages = chat_with_mllm(\n",
    "            model, processor, DOCTYPE_PROMPT, images, messages,\n",
    "            max_new_tokens=CONFIG['MAX_NEW_TOKENS_DOCTYPE']\n",
    "        )\n",
    "        \n",
    "        # Parse document type\n",
    "        document_type = parse_document_type(doctype_answer)\n",
    "        doctype_counts[document_type] += 1\n",
    "        \n",
    "        # STAGE 1: Structure Classification (only for BANK_STATEMENT)\n",
    "        structure_type = \"N/A\"\n",
    "        structure_answer = \"N/A\"\n",
    "        \n",
    "        if document_type == \"BANK_STATEMENT\":\n",
    "            structure_answer, messages = chat_with_mllm(\n",
    "                model, processor, STRUCTURE_CLASSIFICATION_PROMPT, images, messages,\n",
    "                max_new_tokens=CONFIG['MAX_NEW_TOKENS_STRUCTURE']\n",
    "            )\n",
    "            structure_type = parse_structure_type(structure_answer)\n",
    "            structure_counts[structure_type] += 1\n",
    "            extraction_prompt = BANK_PROMPTS[structure_type]\n",
    "            prompt_key = f\"bank_statement_{structure_type}\"\n",
    "            \n",
    "        elif document_type == \"INVOICE\":\n",
    "            extraction_prompt = INVOICE_PROMPT\n",
    "            prompt_key = \"invoice\"\n",
    "            \n",
    "        elif document_type == \"RECEIPT\":\n",
    "            extraction_prompt = RECEIPT_PROMPT\n",
    "            prompt_key = \"receipt\"\n",
    "        \n",
    "        # STAGE 2: Document-Type-Aware Extraction\n",
    "        extraction_result, messages = chat_with_mllm(\n",
    "            model, processor, extraction_prompt, images, messages,\n",
    "            max_new_tokens=CONFIG['MAX_NEW_TOKENS_EXTRACT']\n",
    "        )\n",
    "        \n",
    "        # Parse extraction\n",
    "        extracted_fields = parse_extraction(extraction_result)\n",
    "        \n",
    "        # Store results\n",
    "        result = {\n",
    "            'image_file': image_name,\n",
    "            'document_type': document_type,\n",
    "            'structure_type': structure_type,\n",
    "            'prompt_used': prompt_key,\n",
    "            'doctype_classification': doctype_answer.strip(),\n",
    "            'structure_classification': structure_answer.strip() if isinstance(structure_answer, str) else structure_answer,\n",
    "            'extraction_raw': extraction_result,\n",
    "            **extracted_fields\n",
    "        }\n",
    "        results.append(result)\n",
    "        \n",
    "        rprint(f\"[green]✅ {image_name}: {document_type} ({structure_type if structure_type != 'N/A' else 'direct'})[/green]\")\n",
    "        \n",
    "    except Exception as e:\n",
    "        rprint(f\"[red]❌ {image_name}: Error - {e}[/red]\")\n",
    "        results.append({\n",
    "            'image_file': image_name,\n",
    "            'document_type': 'ERROR',\n",
    "            'structure_type': 'ERROR',\n",
    "            'error': str(e)\n",
    "        })\n",
    "    \n",
    "    finally:\n",
    "        # Memory cleanup after each image\n",
    "        if 'image' in locals():\n",
    "            image.close()\n",
    "        \n",
    "        # Clear GPU cache to prevent OOM on large batches\n",
    "        if torch.cuda.is_available():\n",
    "            torch.cuda.empty_cache()\n",
    "        \n",
    "        # Periodic garbage collection every 3 images\n",
    "        if idx % 3 == 0:\n",
    "            gc.collect()\n",
    "\n",
    "console.rule(\"[bold green]Batch Processing Complete[/bold green]\")\n",
    "rprint(f\"\\n[bold blue]📊 Document Type Classification Summary:[/bold blue]\")\n",
    "rprint(f\"[cyan]  Invoices: {doctype_counts['INVOICE']}[/cyan]\")\n",
    "rprint(f\"[cyan]  Receipts: {doctype_counts['RECEIPT']}[/cyan]\")\n",
    "rprint(f\"[cyan]  Bank Statements: {doctype_counts['BANK_STATEMENT']}[/cyan]\")\n",
    "\n",
    "if doctype_counts['BANK_STATEMENT'] > 0:\n",
    "    rprint(f\"\\n[bold blue]📊 Bank Statement Structure Summary:[/bold blue]\")\n",
    "    rprint(f\"[cyan]  Flat table: {structure_counts['flat']}[/cyan]\")\n",
    "    rprint(f\"[cyan]  Date-grouped: {structure_counts['date_grouped']}[/cyan]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "m8bmy10nugq",
   "metadata": {},
   "source": [
    "## Classification Diagnostics\n",
    "\n",
    "View raw classification responses to understand why all images are classified the same way:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "xl0quiwnpv",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ CSV saved to: /home/jovyan/nfs_share/tod/LMM_POC/output/llama_adaptive_batch_results_20251021_082825.csv</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ CSV saved to: \u001b[0m\u001b[32m/home/jovyan/nfs_share/tod/LMM_POC/output/\u001b[0m\u001b[32mllama_adaptive_batch_results_20251021_082825.csv\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Rows: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">9</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Rows: \u001b[0m\u001b[1;36m9\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008080; text-decoration-color: #008080\">  Columns: </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">24</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[36m  Columns: \u001b[0m\u001b[1;36m24\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">✅ JSON saved to: /home/jovyan/nfs_share/tod/LMM_POC/output/llama_adaptive_batch_results_20251021_082825.json</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32m✅ JSON saved to: \u001b[0m\u001b[32m/home/jovyan/nfs_share/tod/LMM_POC/output/\u001b[0m\u001b[32mllama_adaptive_batch_results_20251021_082825.json\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Convert results to DataFrame\n",
    "df = pd.DataFrame(results)\n",
    "\n",
    "# Save to CSV (compatible with model_comparison.ipynb)\n",
    "csv_output = output_dir / f\"llama_adaptive_batch_results_{TIMESTAMP}.csv\"\n",
    "df.to_csv(csv_output, index=False)\n",
    "\n",
    "rprint(f\"[green]✅ CSV saved to: {csv_output}[/green]\")\n",
    "rprint(f\"[cyan]  Rows: {len(df)}[/cyan]\")\n",
    "rprint(f\"[cyan]  Columns: {len(df.columns)}[/cyan]\")\n",
    "\n",
    "# Save detailed JSON results\n",
    "json_output = output_dir / f\"llama_adaptive_batch_results_{TIMESTAMP}.json\"\n",
    "with open(json_output, 'w') as f:\n",
    "    json.dump(results, f, indent=2)\n",
    "\n",
    "rprint(f\"[green]✅ JSON saved to: {json_output}[/green]\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "o54rhvnj18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">───────────────────────────────────────────────── </span><span style=\"color: #000080; text-decoration-color: #000080; font-weight: bold\">Sample Results</span><span style=\"color: #00ff00; text-decoration-color: #00ff00\"> ──────────────────────────────────────────────────</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[92m───────────────────────────────────────────────── \u001b[0m\u001b[1;34mSample Results\u001b[0m\u001b[92m ──────────────────────────────────────────────────\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">   image_file  document_type structure_type                 prompt_used\n",
       "image_001.png        RECEIPT            N/A                     receipt\n",
       "image_002.png        RECEIPT            N/A                     receipt\n",
       "image_003.png BANK_STATEMENT           flat         bank_statement_flat\n",
       "image_004.png        RECEIPT            N/A                     receipt\n",
       "image_005.png        INVOICE            N/A                     invoice\n",
       "image_006.png        INVOICE            N/A                     invoice\n",
       "image_007.png        INVOICE            N/A                     invoice\n",
       "image_008.png BANK_STATEMENT   date_grouped bank_statement_date_grouped\n",
       "image_009.png BANK_STATEMENT   date_grouped bank_statement_date_grouped\n",
       "</pre>\n"
      ],
      "text/plain": [
       "   image_file  document_type structure_type                 prompt_used\n",
       "image_001.png        RECEIPT            N/A                     receipt\n",
       "image_002.png        RECEIPT            N/A                     receipt\n",
       "image_003.png BANK_STATEMENT           flat         bank_statement_flat\n",
       "image_004.png        RECEIPT            N/A                     receipt\n",
       "image_005.png        INVOICE            N/A                     invoice\n",
       "image_006.png        INVOICE            N/A                     invoice\n",
       "image_007.png        INVOICE            N/A                     invoice\n",
       "image_008.png BANK_STATEMENT   date_grouped bank_statement_date_grouped\n",
       "image_009.png BANK_STATEMENT   date_grouped bank_statement_date_grouped\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display sample results\n",
    "console.rule(\"[bold blue]Sample Results[/bold blue]\")\n",
    "\n",
    "display_cols = ['image_file', 'document_type', 'structure_type', 'prompt_used']\n",
    "\n",
    "rprint(df[display_cols].to_string(index=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cell-16",
   "metadata": {},
   "source": [
    "## Save Results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cell-18",
   "metadata": {},
   "source": [
    "## Display Sample Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cell-19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 DOCUMENT-TYPE-AWARE ADAPTIVE EXTRACTION SUMMARY\n",
      "================================================================================\n",
      "Total images processed: 9\n",
      "Successful extractions: 9\n",
      "Errors: 0\n",
      "\n",
      "Document Type Classification:\n",
      "  Invoices: 3\n",
      "  Receipts: 3\n",
      "  Bank Statements: 3\n",
      "\n",
      "Bank Statement Structure Classification:\n",
      "  Flat table format: 1\n",
      "  Date-grouped format: 2\n",
      "\n",
      "Prompts Used:\n",
      "  bank_statement_date_grouped: 2\n",
      "  bank_statement_flat: 1\n",
      "  invoice: 3\n",
      "  receipt: 3\n",
      "================================================================================\n",
      "\n",
      "📈 Field Extraction Coverage:\n",
      "  DOCUMENT_TYPE: 9/9 (100.0%)\n",
      "  BUSINESS_ABN: 6/9 (66.7%)\n",
      "  SUPPLIER_NAME: 6/9 (66.7%)\n",
      "  BUSINESS_ADDRESS: 6/9 (66.7%)\n",
      "  PAYER_NAME: 6/9 (66.7%)\n",
      "  PAYER_ADDRESS: 6/9 (66.7%)\n",
      "  INVOICE_DATE: 6/9 (66.7%)\n",
      "  LINE_ITEM_DESCRIPTIONS: 9/9 (100.0%)\n",
      "  LINE_ITEM_QUANTITIES: 6/9 (66.7%)\n",
      "  LINE_ITEM_PRICES: 6/9 (66.7%)\n",
      "  LINE_ITEM_TOTAL_PRICES: 6/9 (66.7%)\n",
      "  IS_GST_INCLUDED: 6/9 (66.7%)\n",
      "  GST_AMOUNT: 6/9 (66.7%)\n",
      "  TOTAL_AMOUNT: 6/9 (66.7%)\n",
      "  STATEMENT_DATE_RANGE: 3/9 (33.3%)\n",
      "  TRANSACTION_DATES: 3/9 (33.3%)\n",
      "  TRANSACTION_AMOUNTS_PAID: 3/9 (33.3%)\n"
     ]
    }
   ],
   "source": [
    "# Summary statistics\n",
    "print(\"\\n📊 DOCUMENT-TYPE-AWARE ADAPTIVE EXTRACTION SUMMARY\")\n",
    "print(\"=\"*80)\n",
    "print(f\"Total images processed: {len(results)}\")\n",
    "print(f\"Successful extractions: {len([r for r in results if 'error' not in r])}\")\n",
    "print(f\"Errors: {len([r for r in results if 'error' in r])}\")\n",
    "\n",
    "print(\"\\nDocument Type Classification:\")\n",
    "print(f\"  Invoices: {doctype_counts['INVOICE']}\")\n",
    "print(f\"  Receipts: {doctype_counts['RECEIPT']}\")\n",
    "print(f\"  Bank Statements: {doctype_counts['BANK_STATEMENT']}\")\n",
    "\n",
    "if doctype_counts['BANK_STATEMENT'] > 0:\n",
    "    print(\"\\nBank Statement Structure Classification:\")\n",
    "    print(f\"  Flat table format: {structure_counts['flat']}\")\n",
    "    print(f\"  Date-grouped format: {structure_counts['date_grouped']}\")\n",
    "\n",
    "print(\"\\nPrompts Used:\")\n",
    "prompt_usage = {}\n",
    "for result in results:\n",
    "    if 'prompt_used' in result:\n",
    "        prompt = result['prompt_used']\n",
    "        prompt_usage[prompt] = prompt_usage.get(prompt, 0) + 1\n",
    "\n",
    "for prompt, count in sorted(prompt_usage.items()):\n",
    "    print(f\"  {prompt}: {count}\")\n",
    "\n",
    "print(\"=\"*80)\n",
    "\n",
    "# Field extraction statistics\n",
    "if len(df) > 0:\n",
    "    field_cols = [col for col in df.columns if col not in [\n",
    "        'image_file', 'document_type', 'structure_type', 'prompt_used', \n",
    "        'doctype_classification', 'structure_classification', 'extraction_raw', 'error'\n",
    "    ]]\n",
    "    \n",
    "    if field_cols:\n",
    "        print(\"\\n📈 Field Extraction Coverage:\")\n",
    "        for field in field_cols:\n",
    "            if field in df.columns:\n",
    "                found_count = df[field].notna().sum()\n",
    "                coverage = (found_count / len(df)) * 100\n",
    "                print(f\"  {field}: {found_count}/{len(df)} ({coverage:.1f}%)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cell-20",
   "metadata": {},
   "source": "# View detailed extraction for specific image\nimage_to_view = \"image_003.png\"  # Change this\n\nresult = next((r for r in results if r['image_file'] == image_to_view), None)\n\nif result:\n    print(f\"\\n🔍 Detailed Extraction: {image_to_view}\")\n    print(\"=\"*80)\n    print(f\"Document Type: {result['document_type']}\")\n    print(f\"Structure Type: {result['structure_type']}\")\n    print(f\"Prompt Used: {result['prompt_used']}\")\n    print(f\"\\nDocument Type Classification Response:\")\n    print(result.get('doctype_classification', 'N/A'))\n    print(f\"\\nStructure Classification Response:\")\n    print(result.get('structure_classification', 'N/A'))\n    print(f\"\\nExtraction Result:\")\n    print(result.get('extraction_raw', 'N/A'))\n    print(\"=\"*80)\nelse:\n    print(f\"Image {image_to_view} not found in results\")"
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cell-21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📊 BATCH ADAPTIVE EXTRACTION SUMMARY\n",
      "================================================================================\n",
      "Total images processed: 9\n",
      "Successful extractions: 9\n",
      "Errors: 0\n",
      "\n",
      "Structure Classification:\n",
      "  Flat table format: 1\n",
      "  Date-grouped format: 2\n",
      "\n",
      "Prompts Used:\n",
      "  bank_statement_flat: 1\n",
      "  bank_statement_date_grouped: 2\n",
      "================================================================================\n",
      "\n",
      "📈 Field Extraction Coverage:\n",
      "  document_type: 9/9 (100.0%)\n",
      "  structure_type: 9/9 (100.0%)\n",
      "  doctype_classification: 9/9 (100.0%)\n",
      "  DOCUMENT_TYPE: 9/9 (100.0%)\n",
      "  BUSINESS_ABN: 6/9 (66.7%)\n",
      "  SUPPLIER_NAME: 6/9 (66.7%)\n",
      "  BUSINESS_ADDRESS: 6/9 (66.7%)\n",
      "  PAYER_NAME: 6/9 (66.7%)\n",
      "  PAYER_ADDRESS: 6/9 (66.7%)\n",
      "  INVOICE_DATE: 6/9 (66.7%)\n",
      "  LINE_ITEM_DESCRIPTIONS: 9/9 (100.0%)\n",
      "  LINE_ITEM_QUANTITIES: 6/9 (66.7%)\n",
      "  LINE_ITEM_PRICES: 6/9 (66.7%)\n",
      "  LINE_ITEM_TOTAL_PRICES: 6/9 (66.7%)\n",
      "  IS_GST_INCLUDED: 6/9 (66.7%)\n",
      "  GST_AMOUNT: 6/9 (66.7%)\n",
      "  TOTAL_AMOUNT: 6/9 (66.7%)\n",
      "  STATEMENT_DATE_RANGE: 3/9 (33.3%)\n",
      "  TRANSACTION_DATES: 3/9 (33.3%)\n",
      "  TRANSACTION_AMOUNTS_PAID: 3/9 (33.3%)\n"
     ]
    }
   ],
   "source": [
    "# Summary statistics\n",
    "print(\"\\n📊 BATCH ADAPTIVE EXTRACTION SUMMARY\")\n",
    "print(\"=\"*80)\n",
    "print(f\"Total images processed: {len(results)}\")\n",
    "print(f\"Successful extractions: {len([r for r in results if 'error' not in r])}\")\n",
    "print(f\"Errors: {len([r for r in results if 'error' in r])}\")\n",
    "print(\"\\nStructure Classification:\")\n",
    "print(f\"  Flat table format: {structure_counts['flat']}\")\n",
    "print(f\"  Date-grouped format: {structure_counts['date_grouped']}\")\n",
    "print(\"\\nPrompts Used:\")\n",
    "print(f\"  bank_statement_flat: {structure_counts['flat']}\")\n",
    "print(f\"  bank_statement_date_grouped: {structure_counts['date_grouped']}\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "# Field extraction statistics\n",
    "if len(df) > 0:\n",
    "    field_cols = [col for col in df.columns if col not in [\n",
    "        'image_file', 'detected_structure', 'prompt_used', 'structure_classification', \n",
    "        'extraction_raw', 'error'\n",
    "    ]]\n",
    "    \n",
    "    if field_cols:\n",
    "        print(\"\\n📈 Field Extraction Coverage:\")\n",
    "        for field in field_cols:\n",
    "            if field in df.columns:\n",
    "                found_count = df[field].notna().sum()\n",
    "                coverage = (found_count / len(df)) * 100\n",
    "                print(f\"  {field}: {found_count}/{len(df)} ({coverage:.1f}%)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cell-22",
   "metadata": {},
   "source": [
    "## View Individual Extraction\n",
    "\n",
    "Uncomment and run to view detailed extraction for a specific image:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "cell-23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🔍 Detailed Extraction: image_003.png\n",
      "================================================================================\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'detected_structure'",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mKeyError\u001b[39m                                  Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[16]\u001b[39m\u001b[32m, line 9\u001b[39m\n\u001b[32m      7\u001b[39m \u001b[38;5;28mprint\u001b[39m(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33m🔍 Detailed Extraction: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mimage_to_view\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m)\n\u001b[32m      8\u001b[39m \u001b[38;5;28mprint\u001b[39m(\u001b[33m\"\u001b[39m\u001b[33m=\u001b[39m\u001b[33m\"\u001b[39m*\u001b[32m80\u001b[39m)\n\u001b[32m----> \u001b[39m\u001b[32m9\u001b[39m \u001b[38;5;28mprint\u001b[39m(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mDetected Structure: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[43mresult\u001b[49m\u001b[43m[\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mdetected_structure\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m)\n\u001b[32m     10\u001b[39m \u001b[38;5;28mprint\u001b[39m(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mPrompt Used: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mresult[\u001b[33m'\u001b[39m\u001b[33mprompt_used\u001b[39m\u001b[33m'\u001b[39m]\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m)\n\u001b[32m     11\u001b[39m \u001b[38;5;28mprint\u001b[39m(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33mStructure Classification Response:\u001b[39m\u001b[33m\"\u001b[39m)\n",
      "\u001b[31mKeyError\u001b[39m: 'detected_structure'"
     ]
    }
   ],
   "source": [
    "# View detailed extraction for specific image\n",
    "image_to_view = \"image_003.png\"  # Change this\n",
    "\n",
    "result = next((r for r in results if r['image_file'] == image_to_view), None)\n",
    "\n",
    "if result:\n",
    "    print(f\"\\n🔍 Detailed Extraction: {image_to_view}\")\n",
    "    print(\"=\"*80)\n",
    "    print(f\"Detected Structure: {result['detected_structure']}\")\n",
    "    print(f\"Prompt Used: {result['prompt_used']}\")\n",
    "    print(f\"\\nStructure Classification Response:\")\n",
    "    print(result.get('structure_classification', 'N/A'))\n",
    "    print(f\"\\nExtraction Result:\")\n",
    "    print(result.get('extraction_raw', 'N/A'))\n",
    "    print(\"=\"*80)\n",
    "else:\n",
    "    print(f\"Image {image_to_view} not found in results\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a51e6be4-604e-4370-8cc9-6c4caaf7e98e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (unified_vision_processor)",
   "language": "python",
   "name": "unified_vision_processor"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}