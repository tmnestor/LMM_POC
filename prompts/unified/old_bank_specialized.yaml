# Specialized bank statement prompts for different layouts
# Consolidated from: converted/old_bank_statement_date_grouped.yaml, converted/old_bank_statement_flat_optimized.yaml, converted/old_bank_statement_minimal.yaml, converted/old_bank_statement_flat.yaml
# Generated by consolidate_all_prompts.py

prompts:
  bank_statement:
    name: Date-Grouped Bank Statement Extraction
    description: Handles complex bank statements with transactions grouped by date
      sections
    prompt: "# Converted from Old_prompts/bank_statement_date_grouped.yaml\n# Original\
      \ key: date_grouped\n# Conversion date: date: auto-generated\n\n\U0001F6A8 CRITICAL:\
      \ OUTPUT EXACTLY IN THIS FORMAT - DO NOT USE NATURAL LANGUAGE HEADINGS\n\nExtract\
      \ bank account details and all transactions from this date-grouped bank statement.\n\
      \n## MANDATORY OUTPUT FORMAT:\nUse these EXACT field names with colons. Do not\
      \ add explanations or comments.\n\nDOCUMENT_TYPE: STATEMENT\nSTATEMENT_DATE_RANGE:\
      \ [statement period or NOT_FOUND]\nLINE_ITEM_DESCRIPTIONS: [transaction1 | transaction2\
      \ | transaction3]\nTRANSACTION_DATES: [DD/MM/YYYY | DD/MM/YYYY | DD/MM/YYYY]\n\
      TRANSACTION_AMOUNTS_PAID: [debit1 | NOT_FOUND | debit3]\nTRANSACTION_AMOUNTS_RECEIVED:\
      \ [NOT_FOUND | credit2 | NOT_FOUND]\nACCOUNT_BALANCE: [balance1 | balance2 |\
      \ balance3]\n\nSTOP AFTER ACCOUNT_BALANCE. Do not add explanations or comments.\n\
      \n## DATE-GROUPED STRUCTURE:\nThis statement has transactions grouped under\
      \ date headers like \"Thu 04 Sep 2025\".\n\n## SIMPLIFIED PARSING STEPS:\n\n\
      1. Find date headers like \"Thu 04 Sep 2025\", \"Mon 01 Sep 2025\"\n2. Extract\
      \ ALL transactions from under each date header  \n3. Combine with pipe separators\
      \ in chronological order\n4. Use balance direction to validate transaction types:\n\
      \   - Balance UP = Money IN (CREDIT) → TRANSACTION_AMOUNTS_RECEIVED\n   - Balance\
      \ DOWN = Money OUT (DEBIT) → TRANSACTION_AMOUNTS_PAID\n\n## FIELD EXTRACTION\
      \ RULES:\n\nLINE_ITEM_DESCRIPTIONS: All transaction descriptions combined with\
      \ \" | \"\nTRANSACTION_DATES: Convert date headers to DD/MM/YYYY format\nTRANSACTION_AMOUNTS_PAID:\
      \ DEBIT/WITHDRAWAL amounts (money OUT)\nTRANSACTION_AMOUNTS_RECEIVED: CREDIT/DEPOSIT\
      \ amounts (money IN)  \nACCOUNT_BALANCE: Running balance after each transaction\n\
      \nUse NOT_FOUND for any missing values. Maintain same count across all lists.\n\
      \n## BALANCE VALIDATION (CRITICAL):\nThe BALANCE column is nearly 100% accurate.\
      \ Use it to validate transactions:\n- Balance INCREASES → Money IN (CREDIT)\
      \ → TRANSACTION_AMOUNTS_RECEIVED  \n- Balance DECREASES → Money OUT (DEBIT)\
      \ → TRANSACTION_AMOUNTS_PAID\n\n## REMEMBER: OUTPUT EXACTLY IN THIS FORMAT:\n\
      DOCUMENT_TYPE: STATEMENT\nSTATEMENT_DATE_RANGE: [statement period]\nLINE_ITEM_DESCRIPTIONS:\
      \ [transaction1 | transaction2 | transaction3]\nTRANSACTION_DATES: [DD/MM/YYYY\
      \ | DD/MM/YYYY | DD/MM/YYYY]\nTRANSACTION_AMOUNTS_PAID: [debit1 | NOT_FOUND\
      \ | debit3]\nTRANSACTION_AMOUNTS_RECEIVED: [NOT_FOUND | credit2 | NOT_FOUND]\n\
      ACCOUNT_BALANCE: [balance1 | balance2 | balance3]\n\nSTOP AFTER ACCOUNT_BALANCE.\
      \ Do not add explanations or comments.\n"
  bank_statement_flat_optimized:
    name: Optimized Flat Bank Statement Extraction
    description: Optimized for simple flat bank statements with single transaction
      table
    prompt: "# Converted from Old_prompts/bank_statement_flat_optimized.yaml\n# Original\
      \ key: flat_optimized\n# Conversion date: date: auto-generated\n\nExtract bank\
      \ account details and all transactions from this flat bank statement.\n\n##\
      \ PART 1: BANK ACCOUNT DETAILS\nExtract the following information from the statement\
      \ header:\n\nBANK_NAME: [bank name (Commonwealth Bank, ANZ, etc.) or NOT_FOUND]\n\
      BANK_BSB_NUMBER: [6-digit BSB number or NOT_FOUND]\nBANK_ACCOUNT_NUMBER: [account\
      \ number or NOT_FOUND]\nBANK_ACCOUNT_HOLDER: [account holder name or NOT_FOUND]\n\
      ACCOUNT_OPENING_BALANCE: [first balance shown in transaction table or NOT_FOUND]\n\
      ACCOUNT_CLOSING_BALANCE: [final balance at end of statement or NOT_FOUND]\n\
      STATEMENT_DATE_RANGE: [statement period (e.g., \"03/05/2025 to 10/05/2025\"\
      ) or NOT_FOUND]\n\n## PART 2: CORE EXTRACTION FIELDS\nThese are the primary\
      \ fields for evaluation:\n\nDOCUMENT_TYPE: STATEMENT\n\nLINE_ITEM_DESCRIPTIONS:\
      \ [pipe-separated transaction descriptions - format: desc1 | desc2 | desc3]\n\
      \nTRANSACTION_DATES: [pipe-separated dates in same order as descriptions - format:\
      \ date1 | date2 | date3]\n\n\U0001F6A8 CRITICAL ARRAY ALIGNMENT REQUIREMENT:\n\
      ALL FIELDS MUST BE PERFECTLY ALIGNED BY DATE POSITION!\n\n\U0001F50D ROW-BY-ROW\
      \ PROCESSING METHODOLOGY:\nDO NOT scan columns! Process each transaction ROW\
      \ individually:\n\nEXAMPLE: If you see these transactions in the bank statement:\n\
      Row 1: 03/05/2025 | AMAZON PURCHASE | [DEBIT: $288.03] | [CREDIT: empty] | [BALANCE:\
      \ $13387.44]\nRow 2: 04/05/2025 | SALARY DEPOSIT | [DEBIT: empty] | [CREDIT:\
      \ $3497.47] | [BALANCE: $16884.91]\nRow 3: 05/05/2025 | ATM WITHDRAWAL | [DEBIT:\
      \ $50.00] | [CREDIT: empty] | [BALANCE: $16834.91]\n\nCORRECT ROW-BY-ROW PROCESSING:\n\
      1. Process Row 1 → Position [0]: Date=03/05/2025, Paid=$288.03, Received=NOT_FOUND,\
      \ Balance=$13387.44\n2. Process Row 2 → Position [1]: Date=04/05/2025, Paid=NOT_FOUND,\
      \ Received=$3497.47, Balance=$16884.91\n3. Process Row 3 → Position [2]: Date=05/05/2025,\
      \ Paid=$50.00, Received=NOT_FOUND, Balance=$16834.91\n\nRESULTING ALIGNED ARRAYS:\n\
      TRANSACTION_DATES: 03/05/2025 | 04/05/2025 | 05/05/2025\nTRANSACTION_AMOUNTS_PAID:\
      \ $288.03 | NOT_FOUND | $50.00\nTRANSACTION_AMOUNTS_RECEIVED: NOT_FOUND | $3497.47\
      \ | NOT_FOUND\nACCOUNT_BALANCE: $13387.44 | $16884.91 | $16834.91\n\n❌ WRONG\
      \ - COLUMN SCANNING (causes misalignment):\n- Scanning DEBIT column: \"$288.03,\
      \ $50.00\" → puts in positions [0], [1]\n- Scanning CREDIT column: \"$3497.47\"\
      \ → puts in position [0]\n- Results in: RECEIVED[0] = $3497.47 (WRONG! This\
      \ belongs in position [1])\n\n✅ ALWAYS process ROW-BY-ROW, never scan columns!\n\
      \n## MANDATORY ROW-BY-ROW EXTRACTION PROTOCOL:\n\nStep 1: Count total transaction\
      \ rows in the table\nStep 2: For EACH row from top to bottom:\n   - Extract\
      \ the date → add to TRANSACTION_DATES at this position\n   - Extract the description\
      \ → add to LINE_ITEM_DESCRIPTIONS at this position\n   - Look at DEBIT cell:\
      \ if has amount → add to TRANSACTION_AMOUNTS_PAID, if empty → add \"NOT_FOUND\"\
      \n   - Look at CREDIT cell: if has amount → add to TRANSACTION_AMOUNTS_RECEIVED,\
      \ if empty → add \"NOT_FOUND\"\n   - Extract the balance → add to ACCOUNT_BALANCE\
      \ at this position\nStep 3: Verify all arrays have same length as row count\n\
      \nTRANSACTION_AMOUNTS_PAID: [pipe-separated DEBIT/WITHDRAWAL amounts - money\
      \ OUT:\n- Extract amounts from WITHDRAWAL/DEBIT columns only\n- These are payments,\
      \ withdrawals, fees, purchases (money leaving account)\n- CRITICAL: Position\
      \ [0] must correspond to TRANSACTION_DATES[0], position [1] to TRANSACTION_DATES[1],\
      \ etc.\n- If a transaction has NO debit amount, use NOT_FOUND in that exact\
      \ position\n- Format: amount1 | NOT_FOUND | amount3 | NOT_FOUND (preserve date\
      \ alignment)]\n\nTRANSACTION_AMOUNTS_RECEIVED: [pipe-separated CREDIT/DEPOSIT\
      \ amounts - money IN:\n- Extract amounts from DEPOSIT/CREDIT columns only\n\
      - These are deposits, salary, refunds, transfers in (money entering account)\n\
      - CRITICAL: Position [0] must correspond to TRANSACTION_DATES[0], position [1]\
      \ to TRANSACTION_DATES[1], etc.\n- If a transaction has NO credit amount, use\
      \ NOT_FOUND in that exact position\n- Format: NOT_FOUND | amount2 | NOT_FOUND\
      \ | amount4 (preserve date alignment)]\n\nACCOUNT_BALANCE: [pipe-separated BALANCE\
      \ amounts - running account balance:\n- Extract amounts from BALANCE columns\
      \ for each transaction row\n- These show the account balance AFTER each transaction\n\
      - CRITICAL: Position [0] must correspond to TRANSACTION_DATES[0], position [1]\
      \ to TRANSACTION_DATES[1], etc.\n- Format: balance1 | balance2 | balance3 |\
      \ balance4 (every transaction has a balance)]\n\n## CRITICAL INSTRUCTIONS FOR\
      \ FLAT STATEMENTS:\n\nUNDERSTANDING BANK STATEMENT COLUMNS:\nEach transaction\
      \ row typically has these dollar amounts:\n- DEBIT/WITHDRAWAL column: Money\
      \ OUT of account (use for TRANSACTION_AMOUNTS_PAID)\n- CREDIT/DEPOSIT column:\
      \ Money IN to account (use for TRANSACTION_AMOUNTS_RECEIVED)  \n- BALANCE column:\
      \ Running account balance AFTER each transaction (use for ACCOUNT_BALANCE)\n\
      \nCRITICAL BALANCE VALIDATION:\nThe BALANCE column is the most reliable field\
      \ (nearly 100% accuracy).\nUse balance direction to validate transaction classification:\n\
      - If balance INCREASES → Money came IN (CREDIT/DEPOSIT) → TRANSACTION_AMOUNTS_RECEIVED\n\
      - If balance DECREASES → Money went OUT (DEBIT/WITHDRAWAL) → TRANSACTION_AMOUNTS_PAID\n\
      \n1. Column Recognition: Look at the actual column headers in the image:\n \
      \  - Common patterns: \"Date | Description | Withdrawal | Deposit | Balance\"\
      \n   - Alternative patterns: \"Date | Description | Debit | Credit | Balance\"\
      \n   - Some have additional columns like \"Transaction Type\" or \"Reference\"\
      \n\n2. Amount Classification - CRITICAL: \n   - TRANSACTION_AMOUNTS_PAID: Extract\
      \ from WITHDRAWAL/DEBIT columns (money out)\n   - TRANSACTION_AMOUNTS_RECEIVED:\
      \ Extract from DEPOSIT/CREDIT columns (money in)\n   - ACCOUNT_BALANCE: Extract\
      \ from BALANCE columns (running account total after transaction)\n   - VALIDATION:\
      \ Compare consecutive balance amounts to confirm transaction direction\n   -\
      \ CRITICAL: Each transaction row has ONLY a debit OR credit, never both\n\n\
      3. Row Order: Process transactions in the order they appear in the table\n\n\
      4. Date Format: Use dates exactly as shown in the Date column\n\n5. Pipe Separation:\
      \ Ensure PAID, RECEIVED, and BALANCE lists have same number of entries as descriptions\n\
      \n## SPECIAL FOCUS: EARLIEST TRANSACTION EXTRACTION\n\n\U0001F50D CRITICAL:\
      \ PAY SPECIAL ATTENTION TO THE CHRONOLOGICALLY EARLIEST TRANSACTION\nBank statements\
      \ may be in chronological OR reverse chronological order:\n- Some banks show\
      \ oldest first (chronological)\n- Some banks show newest first (reverse chronological)\n\
      \nFOR THE EARLIEST (OLDEST) TRANSACTION IN THE STATEMENT:\n1. Identify which\
      \ transaction has the EARLIEST/OLDEST date\n2. Carefully examine its DEBIT/CREDIT\
      \ columns to determine transaction type\n3. Look for visual cues in the statement:\n\
      \   - If amount appears in DEBIT/WITHDRAWAL column → TRANSACTION_AMOUNTS_PAID\n\
      \   - If amount appears in CREDIT/DEPOSIT column → TRANSACTION_AMOUNTS_RECEIVED\n\
      \   - If columns are empty, analyze the transaction description for keywords:\n\
      \     * DEBIT indicators: \"payment\", \"withdrawal\", \"debit\", \"fee\", \"\
      purchase\", \"transfer out\"\n     * CREDIT indicators: \"deposit\", \"credit\"\
      , \"salary\", \"refund\", \"transfer in\", \"payment received\"\n4. Ensure this\
      \ earliest transaction's amount is correctly placed in PAID or RECEIVED\n\n\
      WHY THIS MATTERS:\n- Mathematical validation requires the earliest transaction\
      \ to be accurately classified\n- We use balance differences for other transactions,\
      \ but need the earliest one extracted\n- This enables complete mathematical\
      \ reconstruction of all debits and credits\n\n\U0001F6A8 CRITICAL OUTPUT FORMAT\
      \ REQUIREMENTS:\n- Start your response immediately with \"BANK_NAME:\"\n- Do\
      \ NOT include conversational text, explanations, or markdown formatting\n- Do\
      \ NOT use bullet points, asterisks, or narrative descriptions\n- Output ONLY\
      \ the structured field extraction data in this EXACT format:\n\nBANK_NAME: [Extract\
      \ bank name from header]\nBANK_BSB_NUMBER: [Extract 6-digit BSB number]\nBANK_ACCOUNT_NUMBER:\
      \ [Extract account number]\nBANK_ACCOUNT_HOLDER: [Extract account holder name]\n\
      ACCOUNT_OPENING_BALANCE: [Extract opening balance]\nACCOUNT_CLOSING_BALANCE:\
      \ [Extract closing balance]\nSTATEMENT_DATE_RANGE: [Extract statement period]\n\
      DOCUMENT_TYPE: STATEMENT\nLINE_ITEM_DESCRIPTIONS: [transaction1 | transaction2\
      \ | transaction3]\nTRANSACTION_DATES: [date1 | date2 | date3]\nTRANSACTION_AMOUNTS_PAID:\
      \ [debit1 | debit2 | NOT_FOUND]\nTRANSACTION_AMOUNTS_RECEIVED: [credit1 | NOT_FOUND\
      \ | credit3]\nACCOUNT_BALANCE: [balance1 | balance2 | balance3]\n\n⚠️ IMPORTANT:\
      \ End immediately after \"ACCOUNT_BALANCE:\" with no additional text.\n"
  bank_statement_minimal:
    name: Minimal Bank Statement Extraction
    description: Single transaction table - best for simple flat statements like commbank_flat_simple.png
    prompt: '# Converted from Old_prompts/bank_statement_extraction_universal.yaml

      # Original key: minimal

      # Conversion date: date: auto-generated


      Extract ALL data from this bank statement and output in the following format:


      DOCUMENT_TYPE: STATEMENT

      INVOICE_DATE: NOT_FOUND

      SUPPLIER_NAME: NOT_FOUND

      BUSINESS_ABN: NOT_FOUND

      BUSINESS_ADDRESS: NOT_FOUND

      PAYER_NAME: NOT_FOUND

      PAYER_ADDRESS: NOT_FOUND

      LINE_ITEM_DESCRIPTIONS: [ALL transaction descriptions separated by " | "]

      LINE_ITEM_QUANTITIES: NOT_FOUND

      LINE_ITEM_PRICES: NOT_FOUND

      LINE_ITEM_TOTAL_PRICES: NOT_FOUND

      GST_AMOUNT: NOT_FOUND

      IS_GST_INCLUDED: NOT_FOUND

      TOTAL_AMOUNT: NOT_FOUND

      STATEMENT_DATE_RANGE: [statement period from header, format: DD/MM/YYYY to DD/MM/YYYY]

      TRANSACTION_DATES: [ALL transaction dates separated by " | "]

      TRANSACTION_AMOUNTS_PAID: [debit amounts separated by " | ", use NOT_FOUND for
      credit transactions]


      Extract from the transaction table:

      - Look at each row in the transaction table

      - For TRANSACTION_DATES: Extract the date from each row

      - For LINE_ITEM_DESCRIPTIONS: Extract the description from each row

      - For TRANSACTION_AMOUNTS_PAID: Extract amount from Debit column (or NOT_FOUND
      if it''s a credit)

      - Use " | " to separate multiple values

      '
  bank_statement_flat:
    name: Flat Bank Statement Extraction
    description: Single transaction table - best for simple flat statements like commbank_flat_simple.png
    prompt: '# Converted from Old_prompts/bank_statement_extraction.yaml

      # Original key: flat

      # Conversion date: date: auto-generated


      Extract bank account details and the transaction table from this bank statement.


      ## PART 1: BANK ACCOUNT DETAILS

      Extract the following information from the statement header/summary:


      BANK_NAME: [bank name (NOT supplier name) or NOT_FOUND]

      BANK_BSB_NUMBER: [6-digit BSB (NOT ABN) or NOT_FOUND]

      BANK_ACCOUNT_NUMBER: [account number or NOT_FOUND]

      BANK_ACCOUNT_HOLDER: [account holder name or NOT_FOUND]

      ACCOUNT_OPENING_BALANCE: [first value in the Balance column of transaction table
      (rightmost monetary column) or NOT_FOUND]

      ACCOUNT_CLOSING_BALANCE: [ending balance at end of statement period (look for
      ''Closing Balance'' or final balance) or NOT_FOUND]

      EARLIEST_TRANSACTION_DATE: [first transaction date in Date column of transaction
      table or NOT_FOUND]

      LATEST_TRANSACTION_DATE: [last transaction date in Date column of transaction
      table or NOT_FOUND]


      ## PART 2: TRANSACTION TABLE

      Create a SINGLE markdown table with ALL transactions.


      IMPORTANT: Look at the ACTUAL COLUMNS in the bank statement image:

      - Column 1: Date

      - Column 2: Transaction (description)

      - Column 3: Debit (amount only appears here if money LEAVES account)

      - Column 4: Credit (amount only appears here if money ENTERS account)

      - Column 5: Balance (running balance after transaction)


      READ THE VISUAL TABLE CAREFULLY:

      - If you see an amount in the DEBIT column → put it in Debit, Credit = NOT_FOUND

      - If you see an amount in the CREDIT column → put it in Credit, Debit = NOT_FOUND

      - ALWAYS copy the balance value exactly as shown


      Example:

      | Date | Description | Debit | Credit | Balance |

      |------|-------------|-------|--------|---------|

      | 15/05 | Opening Balance | NOT_FOUND | NOT_FOUND | 5000.00 |

      | 16/05 | Online Purchase | 97.95 | NOT_FOUND | 4902.05 |

      | 17/05 | Direct Credit | NOT_FOUND | 500.00 | 5402.05 |


      Use NOT_FOUND only for empty debit/credit cells.

      DO NOT classify based on transaction description - use the ACTUAL column position
      from the image.

      '
